
task02.elf:     file format elf32-littlenios2
task02.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000244 memsz 0x00000244 flags r-x
    LOAD off    0x00001264 vaddr 0x00000264 paddr 0x00000268 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000126c vaddr 0x0000026c paddr 0x0000026c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001268  2**0
                  CONTENTS
  2 .text         00000230  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000014  00000250  00000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00000264  00000268  00001264  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000026c  0000026c  0000126c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00000278  00000278  00001268  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001290  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000ba9  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000673  00000000  00000000  00001fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000804  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000618  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000036c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  000036d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000044ce  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  000044d1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000044e1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000044e2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000044eb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000044fd  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY
 26 .jdi          0000448a  00000000  00000000  0000454d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000476f4  00000000  00000000  000089d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000250 l    d  .rodata	00000000 .rodata
00000264 l    d  .rwdata	00000000 .rwdata
0000026c l    d  .bss	00000000 .bss
00000278 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../task02_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000168 g     F .text	0000002c alt_main
00000268 g       *ABS*	00000000 __flash_rwdata_start
00000194 g     F .text	00000038 alt_putstr
00000264 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000270 g     O .bss	00000004 alt_argv
00008264 g       *ABS*	00000000 _gp
00000278 g       *ABS*	00000000 __bss_end
00000224 g     F .text	00000004 alt_dcache_flush_all
00000268 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00000264 g       *ABS*	00000000 __ram_rodata_end
00000278 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
000001f0 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
000001ec g     F .text	00000004 alt_sys_init
00000264 g       *ABS*	00000000 __ram_rwdata_start
00000250 g       *ABS*	00000000 __ram_rodata_start
00000278 g       *ABS*	00000000 __alt_stack_base
0000026c g       *ABS*	00000000 __bss_start
0000005c g     F .text	0000002c main
0000026c g     O .bss	00000004 alt_envp
00000250 g       *ABS*	00000000 __flash_rodata_start
000001cc g     F .text	00000020 alt_irq_init
00000274 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000268 g       *ABS*	00000000 _edata
00000278 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000022c g     F .text	00000008 altera_nios2_qsys_irq_init
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000234 g     F .text	0000001c strlen
00000228 g     F .text	00000004 alt_icache_flush_all
00000088 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a09914 	ori	gp,gp,33380
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10809b14 	ori	r2,r2,620

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c09e14 	ori	r3,r3,632

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7de0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000880 	call	88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001680 	call	168 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7df4>

0000005c <main>:
	int flag;
	uint8_t count = 0;
	uint8_t count_high = 0b11110000;
	uint8_t count_low = 0b00001111;
	int key_pressed;
	alt_putstr("Task 02 Running\n");
  5c:	01000034 	movhi	r4,0
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"
#include <stdbool.h>

int main ()
{
  60:	deffff04 	addi	sp,sp,-4
	int flag;
	uint8_t count = 0;
	uint8_t count_high = 0b11110000;
	uint8_t count_low = 0b00001111;
	int key_pressed;
	alt_putstr("Task 02 Running\n");
  64:	21009404 	addi	r4,r4,592
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"
#include <stdbool.h>

int main ()
{
  68:	dfc00015 	stw	ra,0(sp)
	int flag;
	uint8_t count = 0;
	uint8_t count_high = 0b11110000;
	uint8_t count_low = 0b00001111;
	int key_pressed;
	alt_putstr("Task 02 Running\n");
  6c:	00001940 	call	194 <alt_putstr>
//			}
//		}

		switch (count & count_low) {
			case 0x00:
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b1000000);
  70:	00801004 	movi	r2,64
  74:	01080404 	movi	r4,8208
				break;
		}

	switch (count & count_high) {
			case 0x00:
				IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b1000000);
  78:	00c80004 	movi	r3,8192
//			}
//		}

		switch (count & count_low) {
			case 0x00:
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b1000000);
  7c:	20800035 	stwio	r2,0(r4)
				break;
		}

	switch (count & count_high) {
			case 0x00:
				IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b1000000);
  80:	18800035 	stwio	r2,0(r3)
  84:	003ffd06 	br	7c <_gp+0xffff7e18>

00000088 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  88:	deffff04 	addi	sp,sp,-4
  8c:	01000034 	movhi	r4,0
  90:	01400034 	movhi	r5,0
  94:	dfc00015 	stw	ra,0(sp)
  98:	21009904 	addi	r4,r4,612
  9c:	29409a04 	addi	r5,r5,616

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  a0:	2140061e 	bne	r4,r5,bc <alt_load+0x34>
  a4:	01000034 	movhi	r4,0
  a8:	01400034 	movhi	r5,0
  ac:	21000804 	addi	r4,r4,32
  b0:	29400804 	addi	r5,r5,32
  b4:	2140121e 	bne	r4,r5,100 <alt_load+0x78>
  b8:	00000b06 	br	e8 <alt_load+0x60>
  bc:	00c00034 	movhi	r3,0
  c0:	18c09a04 	addi	r3,r3,616
  c4:	1907c83a 	sub	r3,r3,r4
  c8:	0005883a 	mov	r2,zero
  {
    while( to != end )
  cc:	10fff526 	beq	r2,r3,a4 <_gp+0xffff7e40>
    {
      *to++ = *from++;
  d0:	114f883a 	add	r7,r2,r5
  d4:	39c00017 	ldw	r7,0(r7)
  d8:	110d883a 	add	r6,r2,r4
  dc:	10800104 	addi	r2,r2,4
  e0:	31c00015 	stw	r7,0(r6)
  e4:	003ff906 	br	cc <_gp+0xffff7e68>
  e8:	01000034 	movhi	r4,0
  ec:	01400034 	movhi	r5,0
  f0:	21009404 	addi	r4,r4,592
  f4:	29409404 	addi	r5,r5,592

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  f8:	2140101e 	bne	r4,r5,13c <alt_load+0xb4>
  fc:	00000b06 	br	12c <alt_load+0xa4>
 100:	00c00034 	movhi	r3,0
 104:	18c00804 	addi	r3,r3,32
 108:	1907c83a 	sub	r3,r3,r4
 10c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 110:	10fff526 	beq	r2,r3,e8 <_gp+0xffff7e84>
    {
      *to++ = *from++;
 114:	114f883a 	add	r7,r2,r5
 118:	39c00017 	ldw	r7,0(r7)
 11c:	110d883a 	add	r6,r2,r4
 120:	10800104 	addi	r2,r2,4
 124:	31c00015 	stw	r7,0(r6)
 128:	003ff906 	br	110 <_gp+0xffff7eac>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 12c:	00002240 	call	224 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 130:	dfc00017 	ldw	ra,0(sp)
 134:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 138:	00002281 	jmpi	228 <alt_icache_flush_all>
 13c:	00c00034 	movhi	r3,0
 140:	18c09904 	addi	r3,r3,612
 144:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 148:	0005883a 	mov	r2,zero
  {
    while( to != end )
 14c:	18bff726 	beq	r3,r2,12c <_gp+0xffff7ec8>
    {
      *to++ = *from++;
 150:	114f883a 	add	r7,r2,r5
 154:	39c00017 	ldw	r7,0(r7)
 158:	110d883a 	add	r6,r2,r4
 15c:	10800104 	addi	r2,r2,4
 160:	31c00015 	stw	r7,0(r6)
 164:	003ff906 	br	14c <_gp+0xffff7ee8>

00000168 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 168:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 16c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 170:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 174:	00001cc0 	call	1cc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 178:	00001ec0 	call	1ec <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 17c:	d1a00217 	ldw	r6,-32760(gp)
 180:	d1600317 	ldw	r5,-32756(gp)
 184:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 188:	dfc00017 	ldw	ra,0(sp)
 18c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 190:	000005c1 	jmpi	5c <main>

00000194 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 194:	defffe04 	addi	sp,sp,-8
 198:	dc000015 	stw	r16,0(sp)
 19c:	dfc00115 	stw	ra,4(sp)
 1a0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1a4:	00002340 	call	234 <strlen>
 1a8:	01000034 	movhi	r4,0
 1ac:	000f883a 	mov	r7,zero
 1b0:	100d883a 	mov	r6,r2
 1b4:	800b883a 	mov	r5,r16
 1b8:	21009904 	addi	r4,r4,612
#else
    return fputs(str, stdout);
#endif
#endif
}
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	dc000017 	ldw	r16,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1c8:	00001f01 	jmpi	1f0 <altera_avalon_jtag_uart_write>

000001cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1cc:	deffff04 	addi	sp,sp,-4
 1d0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 1d4:	000022c0 	call	22c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1d8:	00800044 	movi	r2,1
 1dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1e0:	dfc00017 	ldw	ra,0(sp)
 1e4:	dec00104 	addi	sp,sp,4
 1e8:	f800283a 	ret

000001ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1ec:	f800283a 	ret

000001f0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 1f0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1f4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 1f8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 1fc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 200:	2980072e 	bgeu	r5,r6,220 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 204:	38c00037 	ldwio	r3,0(r7)
 208:	18ffffec 	andhi	r3,r3,65535
 20c:	183ffc26 	beq	r3,zero,200 <_gp+0xffff7f9c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 210:	28c00007 	ldb	r3,0(r5)
 214:	20c00035 	stwio	r3,0(r4)
 218:	29400044 	addi	r5,r5,1
 21c:	003ff806 	br	200 <_gp+0xffff7f9c>

  return count;
}
 220:	f800283a 	ret

00000224 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 224:	f800283a 	ret

00000228 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 228:	f800283a 	ret

0000022c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 22c:	000170fa 	wrctl	ienable,zero
 230:	f800283a 	ret

00000234 <strlen>:
 234:	2005883a 	mov	r2,r4
 238:	10c00007 	ldb	r3,0(r2)
 23c:	18000226 	beq	r3,zero,248 <strlen+0x14>
 240:	10800044 	addi	r2,r2,1
 244:	003ffc06 	br	238 <_gp+0xffff7fd4>
 248:	1105c83a 	sub	r2,r2,r4
 24c:	f800283a 	ret
