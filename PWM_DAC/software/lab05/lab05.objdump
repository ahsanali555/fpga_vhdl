
lab05.elf:     file format elf32-littlenios2
lab05.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800014c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00000b74 memsz 0x00000b74 flags r-x
    LOAD off    0x00001b94 vaddr 0x08000b94 paddr 0x08000ca0 align 2**12
         filesz 0x0000010c memsz 0x0000010c flags rw-
    LOAD off    0x00001dac vaddr 0x08000dac paddr 0x08000dac align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000012c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000009d4  0800014c  0800014c  0000114c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000074  08000b20  08000b20  00001b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000010c  08000b94  08000ca0  00001b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  08000dac  08000dac  00001dac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00000000  00000000  00001ca0  2**0
                  CONTENTS
  7 .sdram        00000000  08000edc  08000edc  00001ca0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000320  00000000  00000000  00001cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00003406  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014a4  00000000  00000000  000053ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000154d  00000000  00000000  00006892  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000414  00000000  00000000  00007de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000f57  00000000  00000000  000081f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000c6a  00000000  00000000  0000914b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00009db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001c8  00000000  00000000  00009dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000b34e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000f  00000000  00000000  0000b351  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000b360  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000b361  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0000b362  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0000b36b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0000b374  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0000b37d  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003e  00000000  00000000  0000b388  2**0
                  CONTENTS, READONLY
 27 .jdi          0000448a  00000000  00000000  0000b3c6  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00074264  00000000  00000000  0000f850  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
0800014c l    d  .text	00000000 .text
08000b20 l    d  .rodata	00000000 .rodata
08000b94 l    d  .rwdata	00000000 .rwdata
08000dac l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory	00000000 .onchip_memory
08000edc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab05_bsp//obj/HAL/src/crt0.o
08000184 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
08000188 l     F .text	00000020 button_isr
0800036c l     F .text	00000054 timer_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08000b94 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
08000dbc g     O .bss	00000004 key_edge
08000a20 g     F .text	0000002c alt_main
08000dc4 g     O .bss	00000004 global_cnt
0800068c g     F .text	00000080 _puts_r
08000ddc g     O .bss	00000100 alt_irq
08000ca0 g       *ABS*	00000000 __flash_rwdata_start
08000428 g     F .text	00000060 init_BUTTONS_interrupts
08000db0 g     O .bss	00000004 right_move
08000c98 g     O .rwdata	00000004 jtag_uart
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08000dc8 g     O .bss	00000004 errno
08000dd4 g     O .bss	00000004 alt_argv
08008c74 g       *ABS*	00000000 _gp
0800070c g     F .text	00000014 puts
080005d0 g     F .text	00000064 .hidden __udivsi3
080003c0 g     F .text	00000068 init_timer
08000dc0 g     O .bss	00000004 prescaler
08000db4 g     O .bss	00000004 char_pointer
08000c8c g     O .rwdata	00000004 _global_impure_ptr
08000c74 g     O .rwdata	00000005 polito
08000edc g       *ABS*	00000000 __bss_end
080008d8 g     F .text	00000068 alt_iic_isr_register
080001a8 g     F .text	000001c4 display
080008c0 g     F .text	00000018 alt_ic_irq_enabled
08000dcc g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	00000060 alt_irq_handler
08000b10 g     F .text	00000004 alt_dcache_flush_all
08000ca0 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
08000a4c g     F .text	00000060 write
08000b94 g       *ABS*	00000000 __ram_rodata_end
08000488 g     F .text	00000034 init_all
08000634 g     F .text	00000058 .hidden __umodsi3
08000edc g       *ABS*	00000000 end
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08000adc g     F .text	00000034 altera_avalon_jtag_uart_write
08000db8 g     O .bss	00000004 test
0800014c g     F .text	0000003c _start
08000acc g     F .text	00000010 alt_sys_init
08000b94 g       *ABS*	00000000 __ram_rwdata_start
08000b20 g       *ABS*	00000000 __ram_rodata_start
08000c84 g     O .rwdata	00000004 O
08000edc g       *ABS*	00000000 __alt_stack_base
0800073c g     F .text	000000b8 __sfvwrite_small_dev
08000dac g       *ABS*	00000000 __bss_start
080004bc g     F .text	0000001c main
08000dd0 g     O .bss	00000004 alt_envp
08000c9c g     O .rwdata	00000004 alt_errno
080004d8 g     F .text	00000084 .hidden __divsi3
08000c80 g     O .rwdata	00000004 L
08000b20 g       *ABS*	00000000 __flash_rodata_start
08000aac g     F .text	00000020 alt_irq_init
080007f4 g     F .text	00000058 _write_r
08000c90 g     O .rwdata	00000004 _impure_ptr
08000dd8 g     O .bss	00000004 alt_argc
08000020 g       .exceptions	00000000 alt_irq_entry
08000dac g     O .bss	00000004 left_move
08000c7c g     O .rwdata	00000004 I
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800084c g     F .text	00000004 alt_ic_isr_register
08000ca0 g       *ABS*	00000000 _edata
08000edc g       *ABS*	00000000 _end
0800014c g       *ABS*	00000000 __ram_exceptions_end
08000888 g     F .text	00000038 alt_ic_irq_disable
08000b18 g     F .text	00000008 altera_nios2_qsys_irq_init
0800055c g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800000c g       .entry	00000000 _exit
08000720 g     F .text	0000001c strlen
08000b14 g     F .text	00000004 alt_icache_flush_all
08000c94 g     O .rwdata	00000004 alt_priority_mask
08000850 g     F .text	00000038 alt_ic_irq_enable
08000c88 g     O .rwdata	00000004 P
08000940 g     F .text	000000e0 alt_load



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08405314 	ori	at,at,332
    jmp r1
 8000008:	0800683a 	jmp	at

0800000c <_exit>:
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defffe04 	addi	sp,sp,-8
 80000f0:	dfc00115 	stw	ra,4(sp)
 80000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000f8:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 80000fc:	04020034 	movhi	r16,2048
 8000100:	84037704 	addi	r16,r16,3548

  active = alt_irq_pending ();

  do
  {
    i = 0;
 8000104:	0005883a 	mov	r2,zero
    mask = 1;
 8000108:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800010c:	20ca703a 	and	r5,r4,r3
 8000110:	28000b26 	beq	r5,zero,8000140 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 8000114:	100490fa 	slli	r2,r2,3
 8000118:	8085883a 	add	r2,r16,r2
 800011c:	10c00017 	ldw	r3,0(r2)
 8000120:	11000117 	ldw	r4,4(r2)
 8000124:	183ee83a 	callr	r3
 8000128:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 800012c:	203ff51e 	bne	r4,zero,8000104 <__alt_data_end+0xfc000104>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 8000130:	dfc00117 	ldw	ra,4(sp)
 8000134:	dc000017 	ldw	r16,0(sp)
 8000138:	dec00204 	addi	sp,sp,8
 800013c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000140:	18c7883a 	add	r3,r3,r3
      i++;
 8000144:	10800044 	addi	r2,r2,1

    } while (1);
 8000148:	003ff006 	br	800010c <__alt_data_end+0xfc00010c>

Disassembly of section .text:

0800014c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 800014c:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000150:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000154:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 8000158:	d6a31d14 	ori	gp,gp,35956
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 800015c:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000160:	10836b14 	ori	r2,r2,3500

    movhi r3, %hi(__bss_end)
 8000164:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000168:	18c3b714 	ori	r3,r3,3804

    beq r2, r3, 1f
 800016c:	10c00326 	beq	r2,r3,800017c <_start+0x30>

0:
    stw zero, (r2)
 8000170:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000174:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000178:	10fffd36 	bltu	r2,r3,8000170 <__alt_data_end+0xfc000170>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 800017c:	80009400 	call	8000940 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000180:	8000a200 	call	8000a20 <alt_main>

08000184 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000184:	003fff06 	br	8000184 <__alt_data_end+0xfc000184>

08000188 <button_isr>:
static void button_isr(void* context)
{
	/* Read the edge capture register from the button PIO
	into destination pointed by an appropriately cast pointer
	*/
	*(volatile int*) context = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
 8000188:	00883304 	movi	r2,8396
 800018c:	10c00037 	ldwio	r3,0(r2)
 8000190:	20c00015 	stw	r3,0(r4)
	/* Write to the edge capture register to reset it */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0x3);
 8000194:	00c000c4 	movi	r3,3
 8000198:	10c00035 	stwio	r3,0(r2)
	printf("Button Pressed\n");
 800019c:	01020034 	movhi	r4,2048
 80001a0:	2102c804 	addi	r4,r4,2848
 80001a4:	800070c1 	jmpi	800070c <puts>

080001a8 <display>:
/*
* DISPLAY ROUTINE
*/
void display()
{
	if(right_move==0 & left_move==0){
 80001a8:	d0e04f17 	ldw	r3,-32452(gp)
 80001ac:	d0a04e17 	ldw	r2,-32456(gp)

/*
* DISPLAY ROUTINE
*/
void display()
{
 80001b0:	defffe04 	addi	sp,sp,-8
 80001b4:	dfc00115 	stw	ra,4(sp)
 80001b8:	dc000015 	stw	r16,0(sp)
	if(right_move==0 & left_move==0){
 80001bc:	1809003a 	cmpeq	r4,r3,zero
 80001c0:	100b003a 	cmpeq	r5,r2,zero
 80001c4:	20000f26 	beq	r4,zero,8000204 <display+0x5c>
 80001c8:	28000e26 	beq	r5,zero,8000204 <display+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, polito[0]);
 80001cc:	d0e00003 	ldbu	r3,-32768(gp)
 80001d0:	00881c04 	movi	r2,8304
 80001d4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, polito[1]);
 80001d8:	d0e00043 	ldbu	r3,-32767(gp)
 80001dc:	00882004 	movi	r2,8320
 80001e0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, polito[2]);
 80001e4:	d0e00083 	ldbu	r3,-32766(gp)
 80001e8:	00882404 	movi	r2,8336
 80001ec:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, polito[3]);
 80001f0:	d0e000c3 	ldbu	r3,-32765(gp)
 80001f4:	00882804 	movi	r2,8352
 80001f8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, polito[4]);
 80001fc:	d0e00103 	ldbu	r3,-32764(gp)
 8000200:	00002906 	br	80002a8 <display+0x100>
	}
	else if(right_move==1 & left_move==0){
 8000204:	18c00060 	cmpeqi	r3,r3,1
 8000208:	18002926 	beq	r3,zero,80002b0 <display+0x108>
 800020c:	28002826 	beq	r5,zero,80002b0 <display+0x108>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, polito[(char_pointer+0)%5]);
 8000210:	d1205017 	ldw	r4,-32448(gp)
 8000214:	01400144 	movi	r5,5
 8000218:	d4200004 	addi	r16,gp,-32768
 800021c:	800055c0 	call	800055c <__modsi3>
 8000220:	8085883a 	add	r2,r16,r2
 8000224:	10c00003 	ldbu	r3,0(r2)
 8000228:	00881c04 	movi	r2,8304
 800022c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, polito[(char_pointer+1)%5]);
 8000230:	d1205017 	ldw	r4,-32448(gp)
 8000234:	01400144 	movi	r5,5
 8000238:	21000044 	addi	r4,r4,1
 800023c:	800055c0 	call	800055c <__modsi3>
 8000240:	8085883a 	add	r2,r16,r2
 8000244:	10c00003 	ldbu	r3,0(r2)
 8000248:	00882004 	movi	r2,8320
 800024c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, polito[(char_pointer+2)%5]);
 8000250:	d1205017 	ldw	r4,-32448(gp)
 8000254:	01400144 	movi	r5,5
 8000258:	21000084 	addi	r4,r4,2
 800025c:	800055c0 	call	800055c <__modsi3>
 8000260:	8085883a 	add	r2,r16,r2
 8000264:	10c00003 	ldbu	r3,0(r2)
 8000268:	00882404 	movi	r2,8336
 800026c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, polito[(char_pointer+3)%5]);
 8000270:	d1205017 	ldw	r4,-32448(gp)
 8000274:	01400144 	movi	r5,5
 8000278:	210000c4 	addi	r4,r4,3
 800027c:	800055c0 	call	800055c <__modsi3>
 8000280:	8085883a 	add	r2,r16,r2
 8000284:	10c00003 	ldbu	r3,0(r2)
 8000288:	00882804 	movi	r2,8352
 800028c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, polito[(char_pointer+4)%5]);
 8000290:	d1205017 	ldw	r4,-32448(gp)
 8000294:	01400144 	movi	r5,5
 8000298:	21000104 	addi	r4,r4,4
 800029c:	800055c0 	call	800055c <__modsi3>
 80002a0:	8085883a 	add	r2,r16,r2
 80002a4:	10c00003 	ldbu	r3,0(r2)
 80002a8:	00882c04 	movi	r2,8368
 80002ac:	00002a06 	br	8000358 <display+0x1b0>
	}
	else if(right_move==0 & left_move==1){
 80002b0:	10800060 	cmpeqi	r2,r2,1
 80002b4:	10002926 	beq	r2,zero,800035c <display+0x1b4>
 80002b8:	20002826 	beq	r4,zero,800035c <display+0x1b4>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, polito[(char_pointer+0)%5]);
 80002bc:	d1205017 	ldw	r4,-32448(gp)
 80002c0:	01400144 	movi	r5,5
 80002c4:	d4200004 	addi	r16,gp,-32768
 80002c8:	800055c0 	call	800055c <__modsi3>
 80002cc:	8085883a 	add	r2,r16,r2
 80002d0:	10c00003 	ldbu	r3,0(r2)
 80002d4:	00882c04 	movi	r2,8368
 80002d8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, polito[(char_pointer+1)%5]);
 80002dc:	d1205017 	ldw	r4,-32448(gp)
 80002e0:	01400144 	movi	r5,5
 80002e4:	21000044 	addi	r4,r4,1
 80002e8:	800055c0 	call	800055c <__modsi3>
 80002ec:	8085883a 	add	r2,r16,r2
 80002f0:	10c00003 	ldbu	r3,0(r2)
 80002f4:	00882804 	movi	r2,8352
 80002f8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, polito[(char_pointer+2)%5]);
 80002fc:	d1205017 	ldw	r4,-32448(gp)
 8000300:	01400144 	movi	r5,5
 8000304:	21000084 	addi	r4,r4,2
 8000308:	800055c0 	call	800055c <__modsi3>
 800030c:	8085883a 	add	r2,r16,r2
 8000310:	10c00003 	ldbu	r3,0(r2)
 8000314:	00882404 	movi	r2,8336
 8000318:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, polito[(char_pointer+3)%5]);
 800031c:	d1205017 	ldw	r4,-32448(gp)
 8000320:	01400144 	movi	r5,5
 8000324:	210000c4 	addi	r4,r4,3
 8000328:	800055c0 	call	800055c <__modsi3>
 800032c:	8085883a 	add	r2,r16,r2
 8000330:	10c00003 	ldbu	r3,0(r2)
 8000334:	00882004 	movi	r2,8320
 8000338:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, polito[(char_pointer+4)%5]);
 800033c:	d1205017 	ldw	r4,-32448(gp)
 8000340:	01400144 	movi	r5,5
 8000344:	21000104 	addi	r4,r4,4
 8000348:	800055c0 	call	800055c <__modsi3>
 800034c:	8085883a 	add	r2,r16,r2
 8000350:	10c00003 	ldbu	r3,0(r2)
 8000354:	00881c04 	movi	r2,8304
 8000358:	10c00035 	stwio	r3,0(r2)
	}
}
 800035c:	dfc00117 	ldw	ra,4(sp)
 8000360:	dc000017 	ldw	r16,0(sp)
 8000364:	dec00204 	addi	sp,sp,8
 8000368:	f800283a 	ret

0800036c <timer_isr>:

/*
* TIMER INTERRUPT ROUTINE
*/
static void timer_isr(void *context)
{
 800036c:	deffff04 	addi	sp,sp,-4
 8000370:	dfc00015 	stw	ra,0(sp)
	/* Clear the interrupt */
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x00);
 8000374:	00881004 	movi	r2,8256
 8000378:	10000035 	stwio	zero,0(r2)
	if ((key_edge&0x01)==1){
 800037c:	d0a05217 	ldw	r2,-32440(gp)
 8000380:	1080004c 	andi	r2,r2,1
 8000384:	10000326 	beq	r2,zero,8000394 <timer_isr+0x28>
		right_move = 1;
 8000388:	00800044 	movi	r2,1
 800038c:	d0a04f15 	stw	r2,-32452(gp)
		left_move = 0;
 8000390:	d0204e15 	stw	zero,-32456(gp)
	else if((key_edge&0x02)==1)
	{
		right_move = 0;
		left_move = 1;
	}
	display();
 8000394:	80001a80 	call	80001a8 <display>
	if(char_pointer == 5){
 8000398:	d0e05017 	ldw	r3,-32448(gp)
 800039c:	00800144 	movi	r2,5
 80003a0:	1880011e 	bne	r3,r2,80003a8 <timer_isr+0x3c>
		char_pointer = 0;
 80003a4:	d0205015 	stw	zero,-32448(gp)
	}
	char_pointer++;
 80003a8:	d0a05017 	ldw	r2,-32448(gp)
 80003ac:	10800044 	addi	r2,r2,1
 80003b0:	d0a05015 	stw	r2,-32448(gp)
}
 80003b4:	dfc00017 	ldw	ra,0(sp)
 80003b8:	dec00104 	addi	sp,sp,4
 80003bc:	f800283a 	ret

080003c0 <init_timer>:

/*
* TIMER INITIALIZATION ROUTINE
*/
void init_timer()
{
 80003c0:	defffe04 	addi	sp,sp,-8
 80003c4:	dfc00115 	stw	ra,4(sp)
	/* Write in the PERIOD register the value 0x989680 corresponding to 25.000.000
	 * corresponding to 1/2 Second of interval*/
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0x7840);
 80003c8:	00881204 	movi	r2,8264
 80003cc:	00de1004 	movi	r3,30784
 80003d0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x017D);
 80003d4:	00881304 	movi	r2,8268
 80003d8:	00c05f44 	movi	r3,381
 80003dc:	10c00035 	stwio	r3,0(r2)
	test = alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ,
 80003e0:	01820034 	movhi	r6,2048
 80003e4:	d8000015 	stw	zero,0(sp)
 80003e8:	000f883a 	mov	r7,zero
 80003ec:	3180db04 	addi	r6,r6,876
 80003f0:	01400044 	movi	r5,1
 80003f4:	0009883a 	mov	r4,zero
 80003f8:	800084c0 	call	800084c <alt_ic_isr_register>
 80003fc:	d0a05115 	stw	r2,-32444(gp)
	timer_isr, NULL,NULL);
	if (test == 0)
 8000400:	1000031e 	bne	r2,zero,8000410 <init_timer+0x50>
	printf("Timer Interrupt Routine Registered\n");
 8000404:	01020034 	movhi	r4,2048
 8000408:	2102cc04 	addi	r4,r4,2864
 800040c:	800070c0 	call	800070c <puts>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
 8000410:	00881104 	movi	r2,8260
 8000414:	00c001c4 	movi	r3,7
 8000418:	10c00035 	stwio	r3,0(r2)
	| ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
}
 800041c:	dfc00117 	ldw	ra,4(sp)
 8000420:	dec00204 	addi	sp,sp,8
 8000424:	f800283a 	ret

08000428 <init_BUTTONS_interrupts>:

/*
* BUTTONS Initialization Routine
*/
void init_BUTTONS_interrupts()
	{
 8000428:	defffe04 	addi	sp,sp,-8
 800042c:	dfc00115 	stw	ra,4(sp)
	/* Enable 2 button interrupts */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x3);
 8000430:	008000c4 	movi	r2,3
 8000434:	00c83204 	movi	r3,8392
 8000438:	18800035 	stwio	r2,0(r3)
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0x3);
 800043c:	00c83304 	movi	r3,8396
 8000440:	18800035 	stwio	r2,0(r3)
	/*
	 * Register the ISR.
	 * Uses the new API interface
	 *
	 * */
	test = alt_ic_isr_register(KEYS_IRQ_INTERRUPT_CONTROLLER_ID, KEYS_IRQ, button_isr,
 8000444:	01820034 	movhi	r6,2048
 8000448:	d8000015 	stw	zero,0(sp)
 800044c:	d1e05204 	addi	r7,gp,-32440
 8000450:	31806204 	addi	r6,r6,392
 8000454:	01400084 	movi	r5,2
 8000458:	0009883a 	mov	r4,zero
 800045c:	800084c0 	call	800084c <alt_ic_isr_register>
 8000460:	d0a05115 	stw	r2,-32444(gp)
	(void*) &key_edge, 0x0);
	if (test == 0)
 8000464:	1000051e 	bne	r2,zero,800047c <init_BUTTONS_interrupts+0x54>
	printf("PIO Interrupt Routine Registered\n");
 8000468:	01020034 	movhi	r4,2048
 800046c:	2102d504 	addi	r4,r4,2900
}
 8000470:	dfc00117 	ldw	ra,4(sp)
 8000474:	dec00204 	addi	sp,sp,8
	 *
	 * */
	test = alt_ic_isr_register(KEYS_IRQ_INTERRUPT_CONTROLLER_ID, KEYS_IRQ, button_isr,
	(void*) &key_edge, 0x0);
	if (test == 0)
	printf("PIO Interrupt Routine Registered\n");
 8000478:	800070c1 	jmpi	800070c <puts>
}
 800047c:	dfc00117 	ldw	ra,4(sp)
 8000480:	dec00204 	addi	sp,sp,8
 8000484:	f800283a 	ret

08000488 <init_all>:
}


/* INITIALIZATION ROUTINE */
void init_all()
{
 8000488:	deffff04 	addi	sp,sp,-4
 800048c:	dfc00015 	stw	ra,0(sp)
	init_timer();
 8000490:	80003c00 	call	80003c0 <init_timer>
	init_BUTTONS_interrupts();
 8000494:	80004280 	call	8000428 <init_BUTTONS_interrupts>
	global_cnt =0;
 8000498:	d0205415 	stw	zero,-32432(gp)
	prescaler =0;
 800049c:	d0205315 	stw	zero,-32436(gp)
	key_edge=0;
 80004a0:	d0205215 	stw	zero,-32440(gp)
	right_move = 0;
 80004a4:	d0204f15 	stw	zero,-32452(gp)
	left_move = 0;
 80004a8:	d0204e15 	stw	zero,-32456(gp)
	char_pointer = 0;
 80004ac:	d0205015 	stw	zero,-32448(gp)
}
 80004b0:	dfc00017 	ldw	ra,0(sp)
 80004b4:	dec00104 	addi	sp,sp,4
 80004b8:	f800283a 	ret

080004bc <main>:
int main()
{
	int i,j;
	float euler = 0;
	long time;
	printf("Euler Approximation 15\n");
 80004bc:	01020034 	movhi	r4,2048

int right_move = 0;
int left_move = 0;

int main()
{
 80004c0:	deffff04 	addi	sp,sp,-4
	int i,j;
	float euler = 0;
	long time;
	printf("Euler Approximation 15\n");
 80004c4:	2102de04 	addi	r4,r4,2936

int right_move = 0;
int left_move = 0;

int main()
{
 80004c8:	dfc00015 	stw	ra,0(sp)
	int i,j;
	float euler = 0;
	long time;
	printf("Euler Approximation 15\n");
 80004cc:	800070c0 	call	800070c <puts>
	init_all();
 80004d0:	80004880 	call	8000488 <init_all>
 80004d4:	003fff06 	br	80004d4 <__alt_data_end+0xfc0004d4>

080004d8 <__divsi3>:
 80004d8:	20001b16 	blt	r4,zero,8000548 <__divsi3+0x70>
 80004dc:	000f883a 	mov	r7,zero
 80004e0:	28001616 	blt	r5,zero,800053c <__divsi3+0x64>
 80004e4:	200d883a 	mov	r6,r4
 80004e8:	29001a2e 	bgeu	r5,r4,8000554 <__divsi3+0x7c>
 80004ec:	00800804 	movi	r2,32
 80004f0:	00c00044 	movi	r3,1
 80004f4:	00000106 	br	80004fc <__divsi3+0x24>
 80004f8:	10000d26 	beq	r2,zero,8000530 <__divsi3+0x58>
 80004fc:	294b883a 	add	r5,r5,r5
 8000500:	10bfffc4 	addi	r2,r2,-1
 8000504:	18c7883a 	add	r3,r3,r3
 8000508:	293ffb36 	bltu	r5,r4,80004f8 <__alt_data_end+0xfc0004f8>
 800050c:	0005883a 	mov	r2,zero
 8000510:	18000726 	beq	r3,zero,8000530 <__divsi3+0x58>
 8000514:	0005883a 	mov	r2,zero
 8000518:	31400236 	bltu	r6,r5,8000524 <__divsi3+0x4c>
 800051c:	314dc83a 	sub	r6,r6,r5
 8000520:	10c4b03a 	or	r2,r2,r3
 8000524:	1806d07a 	srli	r3,r3,1
 8000528:	280ad07a 	srli	r5,r5,1
 800052c:	183ffa1e 	bne	r3,zero,8000518 <__alt_data_end+0xfc000518>
 8000530:	38000126 	beq	r7,zero,8000538 <__divsi3+0x60>
 8000534:	0085c83a 	sub	r2,zero,r2
 8000538:	f800283a 	ret
 800053c:	014bc83a 	sub	r5,zero,r5
 8000540:	39c0005c 	xori	r7,r7,1
 8000544:	003fe706 	br	80004e4 <__alt_data_end+0xfc0004e4>
 8000548:	0109c83a 	sub	r4,zero,r4
 800054c:	01c00044 	movi	r7,1
 8000550:	003fe306 	br	80004e0 <__alt_data_end+0xfc0004e0>
 8000554:	00c00044 	movi	r3,1
 8000558:	003fee06 	br	8000514 <__alt_data_end+0xfc000514>

0800055c <__modsi3>:
 800055c:	20001716 	blt	r4,zero,80005bc <__modsi3+0x60>
 8000560:	000f883a 	mov	r7,zero
 8000564:	2005883a 	mov	r2,r4
 8000568:	28001216 	blt	r5,zero,80005b4 <__modsi3+0x58>
 800056c:	2900162e 	bgeu	r5,r4,80005c8 <__modsi3+0x6c>
 8000570:	01800804 	movi	r6,32
 8000574:	00c00044 	movi	r3,1
 8000578:	00000106 	br	8000580 <__modsi3+0x24>
 800057c:	30000a26 	beq	r6,zero,80005a8 <__modsi3+0x4c>
 8000580:	294b883a 	add	r5,r5,r5
 8000584:	31bfffc4 	addi	r6,r6,-1
 8000588:	18c7883a 	add	r3,r3,r3
 800058c:	293ffb36 	bltu	r5,r4,800057c <__alt_data_end+0xfc00057c>
 8000590:	18000526 	beq	r3,zero,80005a8 <__modsi3+0x4c>
 8000594:	1806d07a 	srli	r3,r3,1
 8000598:	11400136 	bltu	r2,r5,80005a0 <__modsi3+0x44>
 800059c:	1145c83a 	sub	r2,r2,r5
 80005a0:	280ad07a 	srli	r5,r5,1
 80005a4:	183ffb1e 	bne	r3,zero,8000594 <__alt_data_end+0xfc000594>
 80005a8:	38000126 	beq	r7,zero,80005b0 <__modsi3+0x54>
 80005ac:	0085c83a 	sub	r2,zero,r2
 80005b0:	f800283a 	ret
 80005b4:	014bc83a 	sub	r5,zero,r5
 80005b8:	003fec06 	br	800056c <__alt_data_end+0xfc00056c>
 80005bc:	0109c83a 	sub	r4,zero,r4
 80005c0:	01c00044 	movi	r7,1
 80005c4:	003fe706 	br	8000564 <__alt_data_end+0xfc000564>
 80005c8:	00c00044 	movi	r3,1
 80005cc:	003ff106 	br	8000594 <__alt_data_end+0xfc000594>

080005d0 <__udivsi3>:
 80005d0:	200d883a 	mov	r6,r4
 80005d4:	2900152e 	bgeu	r5,r4,800062c <__udivsi3+0x5c>
 80005d8:	28001416 	blt	r5,zero,800062c <__udivsi3+0x5c>
 80005dc:	00800804 	movi	r2,32
 80005e0:	00c00044 	movi	r3,1
 80005e4:	00000206 	br	80005f0 <__udivsi3+0x20>
 80005e8:	10000e26 	beq	r2,zero,8000624 <__udivsi3+0x54>
 80005ec:	28000516 	blt	r5,zero,8000604 <__udivsi3+0x34>
 80005f0:	294b883a 	add	r5,r5,r5
 80005f4:	10bfffc4 	addi	r2,r2,-1
 80005f8:	18c7883a 	add	r3,r3,r3
 80005fc:	293ffa36 	bltu	r5,r4,80005e8 <__alt_data_end+0xfc0005e8>
 8000600:	18000826 	beq	r3,zero,8000624 <__udivsi3+0x54>
 8000604:	0005883a 	mov	r2,zero
 8000608:	31400236 	bltu	r6,r5,8000614 <__udivsi3+0x44>
 800060c:	314dc83a 	sub	r6,r6,r5
 8000610:	10c4b03a 	or	r2,r2,r3
 8000614:	1806d07a 	srli	r3,r3,1
 8000618:	280ad07a 	srli	r5,r5,1
 800061c:	183ffa1e 	bne	r3,zero,8000608 <__alt_data_end+0xfc000608>
 8000620:	f800283a 	ret
 8000624:	0005883a 	mov	r2,zero
 8000628:	f800283a 	ret
 800062c:	00c00044 	movi	r3,1
 8000630:	003ff406 	br	8000604 <__alt_data_end+0xfc000604>

08000634 <__umodsi3>:
 8000634:	2005883a 	mov	r2,r4
 8000638:	2900122e 	bgeu	r5,r4,8000684 <__umodsi3+0x50>
 800063c:	28001116 	blt	r5,zero,8000684 <__umodsi3+0x50>
 8000640:	01800804 	movi	r6,32
 8000644:	00c00044 	movi	r3,1
 8000648:	00000206 	br	8000654 <__umodsi3+0x20>
 800064c:	30000c26 	beq	r6,zero,8000680 <__umodsi3+0x4c>
 8000650:	28000516 	blt	r5,zero,8000668 <__umodsi3+0x34>
 8000654:	294b883a 	add	r5,r5,r5
 8000658:	31bfffc4 	addi	r6,r6,-1
 800065c:	18c7883a 	add	r3,r3,r3
 8000660:	293ffa36 	bltu	r5,r4,800064c <__alt_data_end+0xfc00064c>
 8000664:	18000626 	beq	r3,zero,8000680 <__umodsi3+0x4c>
 8000668:	1806d07a 	srli	r3,r3,1
 800066c:	11400136 	bltu	r2,r5,8000674 <__umodsi3+0x40>
 8000670:	1145c83a 	sub	r2,r2,r5
 8000674:	280ad07a 	srli	r5,r5,1
 8000678:	183ffb1e 	bne	r3,zero,8000668 <__alt_data_end+0xfc000668>
 800067c:	f800283a 	ret
 8000680:	f800283a 	ret
 8000684:	00c00044 	movi	r3,1
 8000688:	003ff706 	br	8000668 <__alt_data_end+0xfc000668>

0800068c <_puts_r>:
 800068c:	defffd04 	addi	sp,sp,-12
 8000690:	dc000015 	stw	r16,0(sp)
 8000694:	2021883a 	mov	r16,r4
 8000698:	2809883a 	mov	r4,r5
 800069c:	dfc00215 	stw	ra,8(sp)
 80006a0:	dc400115 	stw	r17,4(sp)
 80006a4:	2823883a 	mov	r17,r5
 80006a8:	80007200 	call	8000720 <strlen>
 80006ac:	81400217 	ldw	r5,8(r16)
 80006b0:	01020034 	movhi	r4,2048
 80006b4:	2101cf04 	addi	r4,r4,1852
 80006b8:	29000115 	stw	r4,4(r5)
 80006bc:	100f883a 	mov	r7,r2
 80006c0:	880d883a 	mov	r6,r17
 80006c4:	8009883a 	mov	r4,r16
 80006c8:	800073c0 	call	800073c <__sfvwrite_small_dev>
 80006cc:	00ffffc4 	movi	r3,-1
 80006d0:	10c00926 	beq	r2,r3,80006f8 <_puts_r+0x6c>
 80006d4:	81400217 	ldw	r5,8(r16)
 80006d8:	01820034 	movhi	r6,2048
 80006dc:	01c00044 	movi	r7,1
 80006e0:	28800117 	ldw	r2,4(r5)
 80006e4:	3182e404 	addi	r6,r6,2960
 80006e8:	8009883a 	mov	r4,r16
 80006ec:	103ee83a 	callr	r2
 80006f0:	10bfffe0 	cmpeqi	r2,r2,-1
 80006f4:	0085c83a 	sub	r2,zero,r2
 80006f8:	dfc00217 	ldw	ra,8(sp)
 80006fc:	dc400117 	ldw	r17,4(sp)
 8000700:	dc000017 	ldw	r16,0(sp)
 8000704:	dec00304 	addi	sp,sp,12
 8000708:	f800283a 	ret

0800070c <puts>:
 800070c:	00820034 	movhi	r2,2048
 8000710:	10832404 	addi	r2,r2,3216
 8000714:	200b883a 	mov	r5,r4
 8000718:	11000017 	ldw	r4,0(r2)
 800071c:	800068c1 	jmpi	800068c <_puts_r>

08000720 <strlen>:
 8000720:	2005883a 	mov	r2,r4
 8000724:	10c00007 	ldb	r3,0(r2)
 8000728:	18000226 	beq	r3,zero,8000734 <strlen+0x14>
 800072c:	10800044 	addi	r2,r2,1
 8000730:	003ffc06 	br	8000724 <__alt_data_end+0xfc000724>
 8000734:	1105c83a 	sub	r2,r2,r4
 8000738:	f800283a 	ret

0800073c <__sfvwrite_small_dev>:
 800073c:	2880000b 	ldhu	r2,0(r5)
 8000740:	1080020c 	andi	r2,r2,8
 8000744:	10002126 	beq	r2,zero,80007cc <__sfvwrite_small_dev+0x90>
 8000748:	2880008f 	ldh	r2,2(r5)
 800074c:	defffa04 	addi	sp,sp,-24
 8000750:	dc000015 	stw	r16,0(sp)
 8000754:	dfc00515 	stw	ra,20(sp)
 8000758:	dd000415 	stw	r20,16(sp)
 800075c:	dcc00315 	stw	r19,12(sp)
 8000760:	dc800215 	stw	r18,8(sp)
 8000764:	dc400115 	stw	r17,4(sp)
 8000768:	2821883a 	mov	r16,r5
 800076c:	10001216 	blt	r2,zero,80007b8 <__sfvwrite_small_dev+0x7c>
 8000770:	2027883a 	mov	r19,r4
 8000774:	3025883a 	mov	r18,r6
 8000778:	3823883a 	mov	r17,r7
 800077c:	05010004 	movi	r20,1024
 8000780:	04400b0e 	bge	zero,r17,80007b0 <__sfvwrite_small_dev+0x74>
 8000784:	880f883a 	mov	r7,r17
 8000788:	a440010e 	bge	r20,r17,8000790 <__sfvwrite_small_dev+0x54>
 800078c:	01c10004 	movi	r7,1024
 8000790:	8140008f 	ldh	r5,2(r16)
 8000794:	900d883a 	mov	r6,r18
 8000798:	9809883a 	mov	r4,r19
 800079c:	80007f40 	call	80007f4 <_write_r>
 80007a0:	0080050e 	bge	zero,r2,80007b8 <__sfvwrite_small_dev+0x7c>
 80007a4:	88a3c83a 	sub	r17,r17,r2
 80007a8:	90a5883a 	add	r18,r18,r2
 80007ac:	003ff406 	br	8000780 <__alt_data_end+0xfc000780>
 80007b0:	0005883a 	mov	r2,zero
 80007b4:	00000706 	br	80007d4 <__sfvwrite_small_dev+0x98>
 80007b8:	8080000b 	ldhu	r2,0(r16)
 80007bc:	10801014 	ori	r2,r2,64
 80007c0:	8080000d 	sth	r2,0(r16)
 80007c4:	00bfffc4 	movi	r2,-1
 80007c8:	00000206 	br	80007d4 <__sfvwrite_small_dev+0x98>
 80007cc:	00bfffc4 	movi	r2,-1
 80007d0:	f800283a 	ret
 80007d4:	dfc00517 	ldw	ra,20(sp)
 80007d8:	dd000417 	ldw	r20,16(sp)
 80007dc:	dcc00317 	ldw	r19,12(sp)
 80007e0:	dc800217 	ldw	r18,8(sp)
 80007e4:	dc400117 	ldw	r17,4(sp)
 80007e8:	dc000017 	ldw	r16,0(sp)
 80007ec:	dec00604 	addi	sp,sp,24
 80007f0:	f800283a 	ret

080007f4 <_write_r>:
 80007f4:	defffd04 	addi	sp,sp,-12
 80007f8:	dc000015 	stw	r16,0(sp)
 80007fc:	04020034 	movhi	r16,2048
 8000800:	dc400115 	stw	r17,4(sp)
 8000804:	84037204 	addi	r16,r16,3528
 8000808:	2023883a 	mov	r17,r4
 800080c:	2809883a 	mov	r4,r5
 8000810:	300b883a 	mov	r5,r6
 8000814:	380d883a 	mov	r6,r7
 8000818:	dfc00215 	stw	ra,8(sp)
 800081c:	80000015 	stw	zero,0(r16)
 8000820:	8000a4c0 	call	8000a4c <write>
 8000824:	00ffffc4 	movi	r3,-1
 8000828:	10c0031e 	bne	r2,r3,8000838 <_write_r+0x44>
 800082c:	80c00017 	ldw	r3,0(r16)
 8000830:	18000126 	beq	r3,zero,8000838 <_write_r+0x44>
 8000834:	88c00015 	stw	r3,0(r17)
 8000838:	dfc00217 	ldw	ra,8(sp)
 800083c:	dc400117 	ldw	r17,4(sp)
 8000840:	dc000017 	ldw	r16,0(sp)
 8000844:	dec00304 	addi	sp,sp,12
 8000848:	f800283a 	ret

0800084c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800084c:	80008d81 	jmpi	80008d8 <alt_iic_isr_register>

08000850 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000850:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000854:	00bfff84 	movi	r2,-2
 8000858:	2084703a 	and	r2,r4,r2
 800085c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 8000860:	00c00044 	movi	r3,1
 8000864:	d0a05617 	ldw	r2,-32424(gp)
 8000868:	194a983a 	sll	r5,r3,r5
 800086c:	288ab03a 	or	r5,r5,r2
 8000870:	d1605615 	stw	r5,-32424(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8000874:	d0a05617 	ldw	r2,-32424(gp)
 8000878:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800087c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 8000880:	0005883a 	mov	r2,zero
 8000884:	f800283a 	ret

08000888 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000888:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800088c:	00bfff84 	movi	r2,-2
 8000890:	2084703a 	and	r2,r4,r2
 8000894:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 8000898:	00ffff84 	movi	r3,-2
 800089c:	d0a05617 	ldw	r2,-32424(gp)
 80008a0:	194a183a 	rol	r5,r3,r5
 80008a4:	288a703a 	and	r5,r5,r2
 80008a8:	d1605615 	stw	r5,-32424(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80008ac:	d0a05617 	ldw	r2,-32424(gp)
 80008b0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80008b4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 80008b8:	0005883a 	mov	r2,zero
 80008bc:	f800283a 	ret

080008c0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80008c0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80008c4:	00800044 	movi	r2,1
 80008c8:	1144983a 	sll	r2,r2,r5
 80008cc:	10c4703a 	and	r2,r2,r3
}
 80008d0:	1004c03a 	cmpne	r2,r2,zero
 80008d4:	f800283a 	ret

080008d8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80008d8:	00c007c4 	movi	r3,31
 80008dc:	19401616 	blt	r3,r5,8000938 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80008e0:	defffe04 	addi	sp,sp,-8
 80008e4:	dfc00115 	stw	ra,4(sp)
 80008e8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80008ec:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80008f0:	00ffff84 	movi	r3,-2
 80008f4:	80c6703a 	and	r3,r16,r3
 80008f8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 80008fc:	280490fa 	slli	r2,r5,3
 8000900:	00c20034 	movhi	r3,2048
 8000904:	18c37704 	addi	r3,r3,3548
 8000908:	1885883a 	add	r2,r3,r2
 800090c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 8000910:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8000914:	30000226 	beq	r6,zero,8000920 <alt_iic_isr_register+0x48>
 8000918:	80008500 	call	8000850 <alt_ic_irq_enable>
 800091c:	00000106 	br	8000924 <alt_iic_isr_register+0x4c>
 8000920:	80008880 	call	8000888 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000924:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 8000928:	dfc00117 	ldw	ra,4(sp)
 800092c:	dc000017 	ldw	r16,0(sp)
 8000930:	dec00204 	addi	sp,sp,8
 8000934:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 8000938:	00bffa84 	movi	r2,-22
 800093c:	f800283a 	ret

08000940 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8000940:	deffff04 	addi	sp,sp,-4
 8000944:	01020034 	movhi	r4,2048
 8000948:	01420034 	movhi	r5,2048
 800094c:	dfc00015 	stw	ra,0(sp)
 8000950:	2102e504 	addi	r4,r4,2964
 8000954:	29432804 	addi	r5,r5,3232

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8000958:	2140061e 	bne	r4,r5,8000974 <alt_load+0x34>
 800095c:	01020034 	movhi	r4,2048
 8000960:	01420034 	movhi	r5,2048
 8000964:	21000804 	addi	r4,r4,32
 8000968:	29400804 	addi	r5,r5,32
 800096c:	2140121e 	bne	r4,r5,80009b8 <alt_load+0x78>
 8000970:	00000b06 	br	80009a0 <alt_load+0x60>
 8000974:	00c20034 	movhi	r3,2048
 8000978:	18c32804 	addi	r3,r3,3232
 800097c:	1907c83a 	sub	r3,r3,r4
 8000980:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000984:	10fff526 	beq	r2,r3,800095c <__alt_data_end+0xfc00095c>
    {
      *to++ = *from++;
 8000988:	114f883a 	add	r7,r2,r5
 800098c:	39c00017 	ldw	r7,0(r7)
 8000990:	110d883a 	add	r6,r2,r4
 8000994:	10800104 	addi	r2,r2,4
 8000998:	31c00015 	stw	r7,0(r6)
 800099c:	003ff906 	br	8000984 <__alt_data_end+0xfc000984>
 80009a0:	01020034 	movhi	r4,2048
 80009a4:	01420034 	movhi	r5,2048
 80009a8:	2102c804 	addi	r4,r4,2848
 80009ac:	2942c804 	addi	r5,r5,2848

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 80009b0:	2140101e 	bne	r4,r5,80009f4 <alt_load+0xb4>
 80009b4:	00000b06 	br	80009e4 <alt_load+0xa4>
 80009b8:	00c20034 	movhi	r3,2048
 80009bc:	18c05304 	addi	r3,r3,332
 80009c0:	1907c83a 	sub	r3,r3,r4
 80009c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 80009c8:	10fff526 	beq	r2,r3,80009a0 <__alt_data_end+0xfc0009a0>
    {
      *to++ = *from++;
 80009cc:	114f883a 	add	r7,r2,r5
 80009d0:	39c00017 	ldw	r7,0(r7)
 80009d4:	110d883a 	add	r6,r2,r4
 80009d8:	10800104 	addi	r2,r2,4
 80009dc:	31c00015 	stw	r7,0(r6)
 80009e0:	003ff906 	br	80009c8 <__alt_data_end+0xfc0009c8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80009e4:	8000b100 	call	8000b10 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 80009e8:	dfc00017 	ldw	ra,0(sp)
 80009ec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 80009f0:	8000b141 	jmpi	8000b14 <alt_icache_flush_all>
 80009f4:	00c20034 	movhi	r3,2048
 80009f8:	18c2e504 	addi	r3,r3,2964
 80009fc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8000a00:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000a04:	18bff726 	beq	r3,r2,80009e4 <__alt_data_end+0xfc0009e4>
    {
      *to++ = *from++;
 8000a08:	114f883a 	add	r7,r2,r5
 8000a0c:	39c00017 	ldw	r7,0(r7)
 8000a10:	110d883a 	add	r6,r2,r4
 8000a14:	10800104 	addi	r2,r2,4
 8000a18:	31c00015 	stw	r7,0(r6)
 8000a1c:	003ff906 	br	8000a04 <__alt_data_end+0xfc000a04>

08000a20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000a20:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000a24:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000a28:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000a2c:	8000aac0 	call	8000aac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000a30:	8000acc0 	call	8000acc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8000a34:	d1a05717 	ldw	r6,-32420(gp)
 8000a38:	d1605817 	ldw	r5,-32416(gp)
 8000a3c:	d1205917 	ldw	r4,-32412(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 8000a40:	dfc00017 	ldw	ra,0(sp)
 8000a44:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8000a48:	80004bc1 	jmpi	80004bc <main>

08000a4c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 8000a4c:	00800044 	movi	r2,1
 8000a50:	20800226 	beq	r4,r2,8000a5c <write+0x10>
 8000a54:	00800084 	movi	r2,2
 8000a58:	2080041e 	bne	r4,r2,8000a6c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 8000a5c:	01020034 	movhi	r4,2048
 8000a60:	000f883a 	mov	r7,zero
 8000a64:	21032604 	addi	r4,r4,3224
 8000a68:	8000adc1 	jmpi	8000adc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 8000a6c:	d0a00a17 	ldw	r2,-32728(gp)
 8000a70:	10000926 	beq	r2,zero,8000a98 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8000a74:	deffff04 	addi	sp,sp,-4
 8000a78:	dfc00015 	stw	ra,0(sp)
 8000a7c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 8000a80:	00c01444 	movi	r3,81
 8000a84:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8000a88:	00bfffc4 	movi	r2,-1
 8000a8c:	dfc00017 	ldw	ra,0(sp)
 8000a90:	dec00104 	addi	sp,sp,4
 8000a94:	f800283a 	ret
 8000a98:	d0a05504 	addi	r2,gp,-32428
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 8000a9c:	00c01444 	movi	r3,81
 8000aa0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8000aa4:	00bfffc4 	movi	r2,-1
 8000aa8:	f800283a 	ret

08000aac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8000aac:	deffff04 	addi	sp,sp,-4
 8000ab0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 8000ab4:	8000b180 	call	8000b18 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8000ab8:	00800044 	movi	r2,1
 8000abc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8000ac0:	dfc00017 	ldw	ra,0(sp)
 8000ac4:	dec00104 	addi	sp,sp,4
 8000ac8:	f800283a 	ret

08000acc <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8000acc:	00880004 	movi	r2,8192
 8000ad0:	00c00044 	movi	r3,1
 8000ad4:	10c00035 	stwio	r3,0(r2)
 8000ad8:	f800283a 	ret

08000adc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 8000adc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8000ae0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 8000ae4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8000ae8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8000aec:	2980072e 	bgeu	r5,r6,8000b0c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8000af0:	38c00037 	ldwio	r3,0(r7)
 8000af4:	18ffffec 	andhi	r3,r3,65535
 8000af8:	183ffc26 	beq	r3,zero,8000aec <__alt_data_end+0xfc000aec>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 8000afc:	28c00007 	ldb	r3,0(r5)
 8000b00:	20c00035 	stwio	r3,0(r4)
 8000b04:	29400044 	addi	r5,r5,1
 8000b08:	003ff806 	br	8000aec <__alt_data_end+0xfc000aec>

  return count;
}
 8000b0c:	f800283a 	ret

08000b10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8000b10:	f800283a 	ret

08000b14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8000b14:	f800283a 	ret

08000b18 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8000b18:	000170fa 	wrctl	ienable,zero
 8000b1c:	f800283a 	ret
